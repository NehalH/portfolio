[{"content":"üîó Github Repository Description A Flutter Application built specifically for Aerophilia 2022, a Techno-Cultural fest.\nAn application for the Organizers of AEROPHILIA 2022. This app is supposed to help the organizers keep track, send updates, and verify the participants of the techno-cultural fest.\nFeatures The application requires a fixed passkey to access the database securely. The passkey needs to be entered only once during the app initialization process, ensuring that the database and app functionality are accessible only to authorized users. Along with the passkey, the app also requires a digital signature to be entered. This allows for tracking changes made to the database and attributing them to the respective user. Additionally, the application provides quick contact features via WhatsApp or phone call. Users can search for contacts based on names or designations. The app supports scanning participant QR codes to verify their participation status. Users can use the app to modify participant statuses, such as approving payments, creating new participation entries, and marking attendance. These changes are immediately reflected in the database. Screenshots ","permalink":"https://nehalh.github.io/portfolio/projects/orgaero/","summary":"üîó Github Repository Description A Flutter Application built specifically for Aerophilia 2022, a Techno-Cultural fest.\nAn application for the Organizers of AEROPHILIA 2022. This app is supposed to help the organizers keep track, send updates, and verify the participants of the techno-cultural fest.\nFeatures The application requires a fixed passkey to access the database securely. The passkey needs to be entered only once during the app initialization process, ensuring that the database and app functionality are accessible only to authorized users.","title":"AEROPHILIA'22 - ORGANIZER APPLICATION"},{"content":"üîó Credential ","permalink":"https://nehalh.github.io/portfolio/certifications/bitsandbytes/","summary":"üîó Credential ","title":"The Bits and Bytes of Computer Networking"},{"content":"üîó Credential ","permalink":"https://nehalh.github.io/portfolio/certifications/os/","summary":"üîó Credential ","title":"Operating Systems and You: Becoming a Power User"},{"content":"üîó Github Repository Description Raisin is a command-line tool designed to compress text files using layered Huffman encoding techniques. It employs a layered approach, where the data is successively compressed at each layer, resulting in further reduction in size. Python is used as the programming language for the backend implementation.\nFeatures Compresses text files using layered Huffman encoding. Reduces the size of data while retaining the original content. Utilizes a binary string representation for efficient compression. Easy to use as a command-line tool. Why \u0026ldquo;Raisin\u0026rdquo;? Wondering why this compression tool is named \u0026ldquo;Raisin\u0026rdquo; ?\nJust like plump grapes transform into tiny raisins without loosing their nutrition, Raisin shrinks your data while preserving the real information. It\u0026rsquo;s compression without compromise!\nSo, Raisin takes your files, gives them a little squeeze, and voil√†! They become compact, travel-friendly, and ready to be stored or transmitted with ease.\nNext time you use Raisin, remember the grape-to-raisin transformation. It\u0026rsquo;s a small change that makes a big difference!\nHappy compressing, and raisin up your data game! üçá‚ú®\nModules/Functions: level_1: Contains functions for Huffman encoding (huffman_L1()) and decoding (decode_L1()) at level 1. level_2: Contains functions for Huffman encoding (huffman_L2()) and decoding (decode_L2()) at level 2. pack_unpack: Contains functions for packing (pack()) and unpacking (unpack()) data for compression and decompression. read_write: Contains functions for writing the compressed data to a file (write_to_compressed_file()), reading from a compressed file (read_from_compressed_file()), reading from a regular file (read_from_file()), and writing to a regular file (write_to_file()). manipulation: Contains the main compression (compress()) and decompression (decompress()) functions, which utilize the functions from other modules to perform the necessary operations. main: Contains the main function (main()) that serves as the entry point for the program. ","permalink":"https://nehalh.github.io/portfolio/projects/raisin/","summary":"üîó Github Repository Description Raisin is a command-line tool designed to compress text files using layered Huffman encoding techniques. It employs a layered approach, where the data is successively compressed at each layer, resulting in further reduction in size. Python is used as the programming language for the backend implementation.\nFeatures Compresses text files using layered Huffman encoding. Reduces the size of data while retaining the original content. Utilizes a binary string representation for efficient compression.","title":"RAISIN - FILE COMPRESSION ALGORITHM/TOOL"},{"content":"üîó Github Repository Description BookSwap is a web-based application built using Flask, SQLAlchemy, and PostgreSQL. It provides a convenient and user-friendly platform for readers to exchange books with one another, facilitating access to a wider range of books without the need for monetary transactions.\nKey Features User Registration and Authentication: Users can create an account, log in, and securely authenticate their credentials. Book Listing and Search: Users can list their available books for exchange and search for books they are interested in. Exchange Requests: Users can send and receive exchange requests for books they want to exchange. ","permalink":"https://nehalh.github.io/portfolio/projects/bookswap/","summary":"üîó Github Repository Description BookSwap is a web-based application built using Flask, SQLAlchemy, and PostgreSQL. It provides a convenient and user-friendly platform for readers to exchange books with one another, facilitating access to a wider range of books without the need for monetary transactions.\nKey Features User Registration and Authentication: Users can create an account, log in, and securely authenticate their credentials. Book Listing and Search: Users can list their available books for exchange and search for books they are interested in.","title":"BOOK SWAP - BOOK EXCHANGE PLATFORM"},{"content":"üîó Credential ","permalink":"https://nehalh.github.io/portfolio/certifications/itsecurity/","summary":"üîó Credential ","title":"IT Security: Defense against the digital dark arts"},{"content":"üîó Credential ","permalink":"https://nehalh.github.io/portfolio/certifications/cloudbadges/","summary":"üîó Credential ","title":"Google Cloud Skills Boost"},{"content":"üîó Github Repository Description TickerChart is a Python-based API built using flask that provides historical stock market chart data for companies listed on the Indian National Stock Exchange (NSE). It leverages the popular Flask web framework and yfinance library to fetch and deliver stock market data in JSON format.\nDeployment The TickerChart API is now deployed and accessible on PythonAnywhere. You can access the API using the following endpoint:\nAPI Endpoint : http://nehalhosalikar.pythonanywhere.com/chart How to Use To use the TickerChart API, send a GET request to the /chart endpoint with the required query parameters.\nParameters ticker: The stock ticker symbol of the company you want to retrieve data for. period: The time duration for which you want historical data. Valid periods are: 1d, 5d, 1mo, 3mo, 6mo, 1y, 2y, 5y, 10y, ytd, max. interval: The time interval between data points. Valid intervals are: 1m, 2m, 5m, 15m, 30m, 60m, 1h, 1d, 1wk, 1mo, 3mo. Response The API will respond with JSON data containing historical stock market chart data for the requested company and period. The data will be presented in a list of records format.\nExample API Usage To use the TickerChart API, make a GET request to the /chart endpoint with the required query parameters. Here\u0026rsquo;s an example API call:\nExample API Call : http://nehalhosalikar.pythonanywhere.com/chart?ticker=TATASTEEL\u0026amp;period=1d\u0026amp;interval=1m ","permalink":"https://nehalh.github.io/portfolio/projects/tickerchart/","summary":"üîó Github Repository Description TickerChart is a Python-based API built using flask that provides historical stock market chart data for companies listed on the Indian National Stock Exchange (NSE). It leverages the popular Flask web framework and yfinance library to fetch and deliver stock market data in JSON format.\nDeployment The TickerChart API is now deployed and accessible on PythonAnywhere. You can access the API using the following endpoint:\nAPI Endpoint : http://nehalhosalikar.","title":"TICKER-CHART API"},{"content":"üîó Github Repository Description HomeGrown is a mobile application that promotes organic farming, serves as a source of income for farmers, and encourages people to engage in farming by utilizing small available spaces in their gardens or balconies. Our target users are individuals interested in purchasing fresh produce directly from local farmers, as well as those seeking a convenient way to sell their products.\nThe app offers several benefits, including the promotion of sustainable and organic farming practices, which are better for the environment and consumers\u0026rsquo; health. It provides a reliable source of income for local farmers, thereby supporting the local economy. Additionally, it encourages more people to embrace farming by making it accessible and easy, even in small spaces.\nFeatures User registration and login User profile creation and management Product listing and management Product search and filtering Product browsing User to user contacting Usage Upon launching the HomeGrown app, users will be presented with a login screen. New users can create an account by registering with their email and password. Once logged in, farmers can create their profiles, add products with details such as name, description, price, and availability. Buyers can browse the available products, search by category or location, and place orders for the desired items. Farmers and buyers can communicate via in-app messaging to discuss details, negotiate prices, and arrange delivery. Payment for orders can be made securely through integrated payment gateways.\n","permalink":"https://nehalh.github.io/portfolio/projects/homegrown/","summary":"üîó Github Repository Description HomeGrown is a mobile application that promotes organic farming, serves as a source of income for farmers, and encourages people to engage in farming by utilizing small available spaces in their gardens or balconies. Our target users are individuals interested in purchasing fresh produce directly from local farmers, as well as those seeking a convenient way to sell their products.\nThe app offers several benefits, including the promotion of sustainable and organic farming practices, which are better for the environment and consumers\u0026rsquo; health.","title":"HOME GROWN - LOCAL PRODUCE MARKETPLACE"},{"content":"üîó Github Repository Description GutWise is an innovative project focused on promoting gut health and providing valuable insights into the intricate relationship between lifestyle factors and the gut microbiota.\nThis repository serves as a central hub for all the code, resources, and documentation related to GutWise. Our aim is to develop a comprehensive platform that empowers individuals to make informed choices for improving their gut health and overall well-being.\nInside this repository, you will find various components that make up the GutWise system. This includes the classification models and algorithms used to analyze gut health data, data preprocessing scripts, visualization tools, and other supporting resources.\nWe encourage collaboration and contributions from the open-source community to further enhance the capabilities of GutWise. Whether you are an expert in data science, machine learning, or have a keen interest in gut health, there are ample opportunities to get involved and make a meaningful impact.\nBy leveraging the collective expertise and knowledge of contributors like you, we can continue to advance research and provide valuable tools and insights to promote optimal gut health. Together, we can create a healthier future, one gut at a time.\nThank you for your interest in GutWise. I invite you to explore this repository and contribute to this exciting and impactful project.\nNote: The GutWise project is not intended to replace professional medical advice or diagnosis. It is designed to provide information and tools for individuals interested in gut health and should be used in conjunction with guidance from healthcare professionals.\n","permalink":"https://nehalh.github.io/portfolio/projects/gutwise/","summary":"üîó Github Repository Description GutWise is an innovative project focused on promoting gut health and providing valuable insights into the intricate relationship between lifestyle factors and the gut microbiota.\nThis repository serves as a central hub for all the code, resources, and documentation related to GutWise. Our aim is to develop a comprehensive platform that empowers individuals to make informed choices for improving their gut health and overall well-being.\nInside this repository, you will find various components that make up the GutWise system.","title":"GUT-WISE"},{"content":"üîó Github Repository Description This project is a desktop application that provides advanced file and application protection through the use of the operating system\u0026rsquo;s user permission restrictions and dynamic passwords. It offers a unique solution for securing important files and applications, as it leverages the capabilities of the operating system to enforce protection via access modes. This sets it apart from other third-party security applications whose security can be breached simply by removing/uninstallig the software.\nContribute If you are interested in this project then I would be pleased to collaborate. Contribute to this project here.\nOr approach me about this project here.\n","permalink":"https://nehalh.github.io/portfolio/projects/walnutlocker/","summary":"üîó Github Repository Description This project is a desktop application that provides advanced file and application protection through the use of the operating system\u0026rsquo;s user permission restrictions and dynamic passwords. It offers a unique solution for securing important files and applications, as it leverages the capabilities of the operating system to enforce protection via access modes. This sets it apart from other third-party security applications whose security can be breached simply by removing/uninstallig the software.","title":"WALNUT LOCKER - (ONGOING)"},{"content":"üîó Github Repository Description BacLens is an innovative and cutting-edge Flutter application designed to revolutionize the way we explore and identify microscopic organisms. Leveraging the power of machine learning, BacLens brings the world of microorganisms into the palm of your hand, allowing you to identify and learn about diverse microscopic life with ease.\nThe Microscopic World Unveiled Have you ever been curious about the countless unseen microorganisms that exist in our environment? With BacLens, you can now satisfy your curiosity and gain a deeper understanding of the hidden world around us. From bacteria to algae, fungi to protozoa, BacLens can recognize various types of microscopic life forms, making it an invaluable tool for educators, scientists, and enthusiasts alike.\nHow BacLens Works BacLens is built upon advanced machine learning models, allowing it to accurately classify and identify microscopic organisms from images captured through microscopes or other microscopic imaging devices. The application utilizes state-of-the-art computer vision techniques to analyze the unique features of each organism and provide real-time results, all within a user-friendly interface.\n","permalink":"https://nehalh.github.io/portfolio/projects/baclens/","summary":"üîó Github Repository Description BacLens is an innovative and cutting-edge Flutter application designed to revolutionize the way we explore and identify microscopic organisms. Leveraging the power of machine learning, BacLens brings the world of microorganisms into the palm of your hand, allowing you to identify and learn about diverse microscopic life with ease.\nThe Microscopic World Unveiled Have you ever been curious about the countless unseen microorganisms that exist in our environment?","title":"BACLENS"},{"content":"üîó Github Repository Description A device that records flight data (pitch) per unit time, hence the name \u0026lsquo;Black-Box\u0026rsquo;\nHere is how the Black Box works:\nThe device contains 5 major components:\nA microcontroller. Electronic Gyroscope \u0026amp; accelerometer. SD Card module. SD card. 9V battery. The Electronic Gyroscope and accelerometer reads the Angular velocity and acceleration in real-time.\nThis data is then sent to the microcontroller where it is processed using certain mathematical functions.\nThis processed data is further stored into the SD card along with the Time stamp.\nThe firmware of the microcontroller is written using embedded C language.\nThe end result is a set of data in Log format, where the current time and the current angles in the X,Y, and Z axes are stored.\nThe microcontroller only requires a small sized battery as it requires only a 5V input voltage. This makes the setup light and compact.\nThe entire device weighs less¬†than¬†120¬†grams.\n","permalink":"https://nehalh.github.io/portfolio/projects/blackbox/","summary":"üîó Github Repository Description A device that records flight data (pitch) per unit time, hence the name \u0026lsquo;Black-Box\u0026rsquo;\nHere is how the Black Box works:\nThe device contains 5 major components:\nA microcontroller. Electronic Gyroscope \u0026amp; accelerometer. SD Card module. SD card. 9V battery. The Electronic Gyroscope and accelerometer reads the Angular velocity and acceleration in real-time.\nThis data is then sent to the microcontroller where it is processed using certain mathematical functions.","title":"BLACK BOX - DIY FLIGHT RECORDER"}]